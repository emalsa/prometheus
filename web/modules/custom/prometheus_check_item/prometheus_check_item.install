<?php

/**
 * @file
 * Install, update and uninstall functions for the prometheus_check_item module.
 */

use Drupal\prometheus_check_item\TriggerCheck;

/**
 * Implements hook_install().
 */
function prometheus_check_item_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function prometheus_check_item_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
function prometheus_check_item_schema() {
  $schema['prometheus_check_item_example'] = [
    'description' => 'Table description.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record.',
      ],
      'status' => [
        'description' => 'Boolean indicating whether this record is active.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of the record.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'The arbitrary data for the item.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function prometheus_check_item_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['prometheus_check_item_status'] = [
      'title' => t('prometheus_check_item status'),
      'value' => t('prometheus_check_item value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  //  return $requirements;
}

/**
 * Change check item status for clean start
 */
function prometheus_check_item_update_10002(&$sandbox) {
  $query = \Drupal::entityQuery('node');
  $query
    ->accessCheck(FALSE)
    ->condition('type', 'check_item');
  $nids = $query->execute();
  if (empty($nids)) {
    // Log.
    return NULL;
  }

  $checkItems = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
  foreach ($checkItems as $checkItem) {
    $checkItem->set('field_status', TriggerCheck::CHECKED_STATUS);
    $checkItem->save();
  }
}

/**
 * Change check item status for clean start
 */
function prometheus_check_item_update_10003(&$sandbox) {
  $query = \Drupal::entityQuery('node');
  $query
    ->accessCheck(FALSE)
    ->condition('type', 'check_item');
  $nids = $query->execute();
  if (empty($nids)) {
    // Log.
    return NULL;
  }

  $searchFields = [
    'field_time_appconnect' => 'time_appconnect',
    'field_time_connect' => 'time_connect',
    'field_time_namelookup' => 'time_namelookup',
    'field_time_pretransfer' => 'time_pretransfer',
    'field_time_redirect' => 'time_redirect',
    'field_time_starttransfer' => 'time_starttransfer',
    'field_time_total' => 'time_total',
  ];

  $checkItems = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
  foreach ($checkItems as $checkItem) {
    $checkItem->set('field_status', TriggerCheck::CHECKED_STATUS);
    foreach ($searchFields as $fieldname => $search) {
      $checkItem->set($fieldname, 0);

    }
    $checkItem->save();
  }
}